name: CI

on:
  # Triggers the workflow on push events but only for the master branch
  push:
    branches: [ "auto", "try", "try-linux", "try-mac", "try-windows", "try-wpt"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  SHELL: /bin/bash

jobs:

  build-mac:
    name: Build (macOS)
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2
          
      - name: Bootstrap
        run: |
          python3 -m pip install --upgrade pip virtualenv          
          
      - name: Cache OpenSSL
        uses: actions/cache@v2
        env:
          cache-name: cache-openssl
        with:
          path: ${{ github.workspace }}/openssl-1.1.1l
          key: ${{ runner.os }}-openssl-${{ env.cache-name }}          

      - name: Build OpenSSL
        if: steps.cache-openssl.outputs.cache-hit != 'true'
        run: |
          curl https://www.openssl.org/source/openssl-1.1.1l.tar.gz -o ${{ github.workspace }}/openssl
          tar xvf ${{ github.workspace }}/openssl
          cd ${{ github.workspace }}/openssl-1.1.1l
          ./Configure shared enable-rc5 zlib darwin64-arm64-cc no-asm
          make
          
      - name: Install OpenSSL
        run: |
          cd ${{ github.workspace }}/openssl-1.1.1l
          sudo make install
          
      - name: Cache Cargo
        uses: actions/cache@v2
        env:
          cache-name: cache-rust-cargo
        with:
          path: ${{ github.workspace }}/.cargo
          key: ${{ runner.os }}-cargo-${{ env.cache-name }}

      - name: Release build - libservo ios
        run: |
          export OPENSSL_INCLUDE_DIR="/usr/local/include/openssl"
          export OPENSSL_LIB_DIR="/usr/local/lib"
          export PKG_CONFIG_PATH="$(brew --prefix libffi)/lib/pkgconfig/"
          export PKG_CONFIG_PATH="$(brew --prefix zlib)/lib/pkgconfig/:$PKG_CONFIG_PATH"
          export PKG_CONFIG_ALLOW_CROSS=1
          export AR=ar
          python3 ./mach build --release --target aarch64-apple-ios
      - name: Package binary
        run: gtar -czf target.tar.gz target/* resources
      - name: Archive binary
        uses: actions/upload-artifact@v2
        with:
          name: release-binary-macos
          path: target.tar.gz
  

  build_result:
    name: homu build finished
    runs-on: ubuntu-latest
    needs:
      - "build-mac"

    steps:
      - name: Mark the job as successful
        run: exit 0
        if: success()
      - name: Mark the job as unsuccessful
        run: exit 1
        if: "!success()"
